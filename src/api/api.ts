/* tslint:disable */
/* eslint-disable */
/**
 * HowToDo API
 * On development stage.
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CreateRequestDto
 */
export interface CreateRequestDto {
    /**
     * Тип заказчика
     * @type {CustomerType}
     * @memberof CreateRequestDto
     */
    customerType: CustomerType;
    /**
     * Название организации или ФИО заказчика
     * @type {string}
     * @memberof CreateRequestDto
     */
    customerName: string;
    /**
     * Номер заказчика
     * @type {string}
     * @memberof CreateRequestDto
     */
    phone: string;
    /**
     * Почта заказчика
     * @type {string}
     * @memberof CreateRequestDto
     */
    email: string;
    /**
     * Заголовок заявки
     * @type {string}
     * @memberof CreateRequestDto
     */
    requestTitle: string;
    /**
     * Подробности заявки
     * @type {string}
     * @memberof CreateRequestDto
     */
    requestDetails: string;
    /**
     * Название файла
     * @type {string}
     * @memberof CreateRequestDto
     */
    fileName?: string;
    /**
     * Ссылка на файл
     * @type {string}
     * @memberof CreateRequestDto
     */
    fileLink?: string;
    /**
     * Идентификатор категории
     * @type {string}
     * @memberof CreateRequestDto
     */
    categoryId: string;
}
/**
 * 
 * @export
 * @interface CreateUserDto
 */
export interface CreateUserDto {
    /**
     * Логин пользователя
     * @type {string}
     * @memberof CreateUserDto
     */
    login: string;
    /**
     * Роль пользователя
     * @type {Roles}
     * @memberof CreateUserDto
     */
    role: Roles;
    /**
     * Пароль пользователя
     * @type {string}
     * @memberof CreateUserDto
     */
    password: string;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export enum CustomerType {
    Individual = 'individual',
    Entity = 'entity'
}

/**
 * 
 * @export
 * @interface GetCategoryDto
 */
export interface GetCategoryDto {
    /**
     * Название категории
     * @type {string}
     * @memberof GetCategoryDto
     */
    name: string;
    /**
     * Идентификатор категории
     * @type {string}
     * @memberof GetCategoryDto
     */
    id: string;
}
/**
 * 
 * @export
 * @interface GetRequestDto
 */
export interface GetRequestDto {
    /**
     * Тип заказчика
     * @type {CustomerType}
     * @memberof GetRequestDto
     */
    customerType: CustomerType;
    /**
     * Название организации или ФИО заказчика
     * @type {string}
     * @memberof GetRequestDto
     */
    customerName: string;
    /**
     * Номер заказчика
     * @type {string}
     * @memberof GetRequestDto
     */
    phone: string;
    /**
     * Почта заказчика
     * @type {string}
     * @memberof GetRequestDto
     */
    email: string;
    /**
     * Заголовок заявки
     * @type {string}
     * @memberof GetRequestDto
     */
    requestTitle: string;
    /**
     * Подробности заявки
     * @type {string}
     * @memberof GetRequestDto
     */
    requestDetails: string;
    /**
     * Название файла
     * @type {string}
     * @memberof GetRequestDto
     */
    fileName?: string;
    /**
     * Ссылка на файл
     * @type {string}
     * @memberof GetRequestDto
     */
    fileLink?: string;
    /**
     * Идентификатор категории
     * @type {string}
     * @memberof GetRequestDto
     */
    categoryId: string;
    /**
     * Идентификатор заявки
     * @type {string}
     * @memberof GetRequestDto
     */
    id: string;
    /**
     * Дата добавления запроса
     * @type {string}
     * @memberof GetRequestDto
     */
    date: string;
}
/**
 * 
 * @export
 * @interface GetUserDto
 */
export interface GetUserDto {
    /**
     * Логин пользователя
     * @type {string}
     * @memberof GetUserDto
     */
    login: string;
    /**
     * Роль пользователя
     * @type {Roles}
     * @memberof GetUserDto
     */
    role: Roles;
    /**
     * Идентификатор пользователя
     * @type {string}
     * @memberof GetUserDto
     */
    id: string;
}
/**
 * 
 * @export
 * @interface GetUserToken
 */
export interface GetUserToken {
    /**
     * Идентификатор сессии
     * @type {string}
     * @memberof GetUserToken
     */
    sessionId: string;
    /**
     * Токен для получения нового
     * @type {string}
     * @memberof GetUserToken
     */
    refreshToken: string;
    /**
     * Токен доступа
     * @type {string}
     * @memberof GetUserToken
     */
    accessToken: string;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    detail?: Array<ValidationError>;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export enum Roles {
    Admin = 'admin',
    User = 'user'
}

/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<string>}
     * @memberof ValidationError
     */
    loc: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    msg: string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    type: string;
}

/**
 * CategoryApi - axios parameter creator
 * @export
 */
export const CategoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Добавить категорию
         * @param {string} categoryName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCategory: async (categoryName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryName' is not null or undefined
            assertParamExists('createCategory', 'categoryName', categoryName)
            const localVarPath = `/category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (categoryName !== undefined) {
                localVarQueryParameter['category_name'] = categoryName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Удаление категории по ID
         * @param {string} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategory: async (categoryId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('deleteCategory', 'categoryId', categoryId)
            const localVarPath = `/category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (categoryId !== undefined) {
                localVarQueryParameter['category_id'] = categoryId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получить все категории
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCategory: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получить все запросы по названию категории
         * @param {string} categoryName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRequestByName: async (categoryName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryName' is not null or undefined
            assertParamExists('getRequestByName', 'categoryName', categoryName)
            const localVarPath = `/category/categoryRequests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (categoryName !== undefined) {
                localVarQueryParameter['category_name'] = categoryName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoryApi - functional programming interface
 * @export
 */
export const CategoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Добавить категорию
         * @param {string} categoryName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCategory(categoryName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCategoryDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCategory(categoryName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Удаление категории по ID
         * @param {string} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCategory(categoryId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCategory(categoryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Получить все категории
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCategory(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetCategoryDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCategory(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Получить все запросы по названию категории
         * @param {string} categoryName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRequestByName(categoryName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetRequestDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRequestByName(categoryName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CategoryApi - factory interface
 * @export
 */
export const CategoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoryApiFp(configuration)
    return {
        /**
         * 
         * @summary Добавить категорию
         * @param {string} categoryName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCategory(categoryName: string, options?: any): AxiosPromise<GetCategoryDto> {
            return localVarFp.createCategory(categoryName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Удаление категории по ID
         * @param {string} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategory(categoryId: string, options?: any): AxiosPromise<any> {
            return localVarFp.deleteCategory(categoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получить все категории
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCategory(options?: any): AxiosPromise<Array<GetCategoryDto>> {
            return localVarFp.getAllCategory(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получить все запросы по названию категории
         * @param {string} categoryName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRequestByName(categoryName: string, options?: any): AxiosPromise<Array<GetRequestDto>> {
            return localVarFp.getRequestByName(categoryName, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CategoryApi - object-oriented interface
 * @export
 * @class CategoryApi
 * @extends {BaseAPI}
 */
export class CategoryApi extends BaseAPI {
    /**
     * 
     * @summary Добавить категорию
     * @param {string} categoryName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public createCategory(categoryName: string, options?: any) {
        return CategoryApiFp(this.configuration).createCategory(categoryName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Удаление категории по ID
     * @param {string} categoryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public deleteCategory(categoryId: string, options?: any) {
        return CategoryApiFp(this.configuration).deleteCategory(categoryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получить все категории
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public getAllCategory(options?: any) {
        return CategoryApiFp(this.configuration).getAllCategory(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получить все запросы по названию категории
     * @param {string} categoryName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public getRequestByName(categoryName: string, options?: any) {
        return CategoryApiFp(this.configuration).getRequestByName(categoryName, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RequestApi - axios parameter creator
 * @export
 */
export const RequestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Добавить запрос в БД
         * @param {CreateRequestDto} createRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRequest: async (createRequestDto: CreateRequestDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'createRequestDto' is not null or undefined
            assertParamExists('createRequest', 'createRequestDto', createRequestDto)
            const localVarPath = `/request`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Удалить запрос по id
         * @param {string} requestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRequest: async (requestId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestId' is not null or undefined
            assertParamExists('deleteRequest', 'requestId', requestId)
            const localVarPath = `/request`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (requestId !== undefined) {
                localVarQueryParameter['request_id'] = requestId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получить последние 9 заявок
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestRequest: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/request/latest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получить запрос по id
         * @param {string} requestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRequestById: async (requestId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestId' is not null or undefined
            assertParamExists('getRequestById', 'requestId', requestId)
            const localVarPath = `/request`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (requestId !== undefined) {
                localVarQueryParameter['request_id'] = requestId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RequestApi - functional programming interface
 * @export
 */
export const RequestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RequestApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Добавить запрос в БД
         * @param {CreateRequestDto} createRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRequest(createRequestDto: CreateRequestDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetRequestDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRequest(createRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Удалить запрос по id
         * @param {string} requestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRequest(requestId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRequest(requestId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Получить последние 9 заявок
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLatestRequest(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetRequestDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLatestRequest(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Получить запрос по id
         * @param {string} requestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRequestById(requestId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetRequestDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRequestById(requestId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RequestApi - factory interface
 * @export
 */
export const RequestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RequestApiFp(configuration)
    return {
        /**
         * 
         * @summary Добавить запрос в БД
         * @param {CreateRequestDto} createRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRequest(createRequestDto: CreateRequestDto, options?: any): AxiosPromise<GetRequestDto> {
            return localVarFp.createRequest(createRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Удалить запрос по id
         * @param {string} requestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRequest(requestId: string, options?: any): AxiosPromise<any> {
            return localVarFp.deleteRequest(requestId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получить последние 9 заявок
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestRequest(options?: any): AxiosPromise<Array<GetRequestDto>> {
            return localVarFp.getLatestRequest(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получить запрос по id
         * @param {string} requestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRequestById(requestId: string, options?: any): AxiosPromise<GetRequestDto> {
            return localVarFp.getRequestById(requestId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RequestApi - object-oriented interface
 * @export
 * @class RequestApi
 * @extends {BaseAPI}
 */
export class RequestApi extends BaseAPI {
    /**
     * 
     * @summary Добавить запрос в БД
     * @param {CreateRequestDto} createRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public createRequest(createRequestDto: CreateRequestDto, options?: any) {
        return RequestApiFp(this.configuration).createRequest(createRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Удалить запрос по id
     * @param {string} requestId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public deleteRequest(requestId: string, options?: any) {
        return RequestApiFp(this.configuration).deleteRequest(requestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получить последние 9 заявок
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public getLatestRequest(options?: any) {
        return RequestApiFp(this.configuration).getLatestRequest(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получить запрос по id
     * @param {string} requestId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public getRequestById(requestId: string, options?: any) {
        return RequestApiFp(this.configuration).getRequestById(requestId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Добавить пользователя
         * @param {CreateUserDto} createUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: async (createUserDto: CreateUserDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUserDto' is not null or undefined
            assertParamExists('createUser', 'createUserDto', createUserDto)
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Удаление пользователя по ID
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserById: async (userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteUserById', 'userId', userId)
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получить пользователя по ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUserById', 'id', id)
            const localVarPath = `/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получить пользователей по ролям (пусто - то получить всех)
         * @param {Roles} [role] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersByRoles: async (role?: Roles, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (role !== undefined) {
                localVarQueryParameter['role'] = role;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Авторизация пользователя
         * @param {string} login 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userAuth: async (login: string, password: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'login' is not null or undefined
            assertParamExists('userAuth', 'login', login)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('userAuth', 'password', password)
            const localVarPath = `/user/auth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (login !== undefined) {
                localVarQueryParameter['login'] = login;
            }

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Добавить пользователя
         * @param {CreateUserDto} createUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUser(createUserDto: CreateUserDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(createUserDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Удаление пользователя по ID
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserById(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserById(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Получить пользователя по ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Получить пользователей по ролям (пусто - то получить всех)
         * @param {Roles} [role] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersByRoles(role?: Roles, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetUserDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersByRoles(role, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Авторизация пользователя
         * @param {string} login 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userAuth(login: string, password: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserToken>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userAuth(login, password, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @summary Добавить пользователя
         * @param {CreateUserDto} createUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(createUserDto: CreateUserDto, options?: any): AxiosPromise<GetUserDto> {
            return localVarFp.createUser(createUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Удаление пользователя по ID
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserById(userId: string, options?: any): AxiosPromise<any> {
            return localVarFp.deleteUserById(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получить пользователя по ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById(id: string, options?: any): AxiosPromise<GetUserDto> {
            return localVarFp.getUserById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получить пользователей по ролям (пусто - то получить всех)
         * @param {Roles} [role] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersByRoles(role?: Roles, options?: any): AxiosPromise<Array<GetUserDto>> {
            return localVarFp.getUsersByRoles(role, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Авторизация пользователя
         * @param {string} login 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userAuth(login: string, password: string, options?: any): AxiosPromise<GetUserToken> {
            return localVarFp.userAuth(login, password, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @summary Добавить пользователя
     * @param {CreateUserDto} createUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public createUser(createUserDto: CreateUserDto, options?: any) {
        return UserApiFp(this.configuration).createUser(createUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Удаление пользователя по ID
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public deleteUserById(userId: string, options?: any) {
        return UserApiFp(this.configuration).deleteUserById(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получить пользователя по ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserById(id: string, options?: any) {
        return UserApiFp(this.configuration).getUserById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получить пользователей по ролям (пусто - то получить всех)
     * @param {Roles} [role] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUsersByRoles(role?: Roles, options?: any) {
        return UserApiFp(this.configuration).getUsersByRoles(role, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Авторизация пользователя
     * @param {string} login 
     * @param {string} password 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userAuth(login: string, password: string, options?: any) {
        return UserApiFp(this.configuration).userAuth(login, password, options).then((request) => request(this.axios, this.basePath));
    }
}


